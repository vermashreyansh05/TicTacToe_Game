{"ast":null,"code":"var _s = $RefreshSig$();\nimport { render } from '@testing-library/react';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Dashboard from '../screen/Dashboard';\nimport Main from '../screen/main';\nconst MultiPlayerData = async props => {\n  debugger;\n  if (props.length === 2) {\n    debugger;\n    const resp = await axios.get(`http://localhost:4000/multi_player?board=${props[0]}&reset=true`);\n    console.log('reset', resp);\n  } else {\n    debugger;\n    const resp = await axios.get(`http://localhost:4000/multi_player?board=${props}`);\n    debugger;\n    console.log('chance', resp);\n    if (resp.data.game_result.result) {\n      {\n        alert(\"GAme Over...\", resp.data.game_result.result);\n      }\n    }\n  }\n};\n_c = MultiPlayerData;\nconst RenderData = props => {\n  _s();\n  const [newData, setNewdata] = useState([]);\n  setNewdata(props);\n  render(Main(newData));\n};\n_s(RenderData, \"l5JHpuFNgCFORlCXq/q4ioLkJc8=\");\n_c2 = RenderData;\nconst SinglePlayerData = async props => {\n  let count = 0;\n  // const [newArry,setNewArry] = useState([])\n  debugger;\n  if (props.length === 2) {\n    debugger;\n    const resp = await axios.get(`http://localhost:4000/single_player?board=${props[0]}&reset=true`);\n    console.log('reset resp', resp);\n  } else {\n    count += 1;\n    debugger;\n    const resp = await axios.get(`http://localhost:4000/single_player?board=${props}`);\n    debugger;\n    let board = resp.data.current_board.board;\n    let splitBoard = board.split(\"\");\n    if (splitBoard.length < 9) {\n      while (splitBoard.length < 9) {\n        splitBoard.push(\" \");\n      }\n      let newBoard = splitBoard.join(\"\");\n      debugger;\n      localStorage.setItem(\"splitBoard\", newBoard);\n      console.log('newBoard = ', newBoard);\n    } else {\n      let newBoard = splitBoard.join(\"\");\n      localStorage.setItem(\"splitBoard\", newBoard);\n      console.log('newBoard = ', newBoard);\n      debugger;\n      // setNewArry(splitBoard)\n    }\n    // console.log(\"chance resp\",newBoard)\n  }\n\n  debugger;\n  render(Main(\"single_player\", count)\n  // <Dashboard props={\"single_player\"}/>\n  );\n};\n_c3 = SinglePlayerData;\nexport { MultiPlayerData, SinglePlayerData, RenderData };\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MultiPlayerData\");\n$RefreshReg$(_c2, \"RenderData\");\n$RefreshReg$(_c3, \"SinglePlayerData\");","map":{"version":3,"names":["render","axios","React","useEffect","useState","useNavigate","Dashboard","Main","MultiPlayerData","props","length","resp","get","console","log","data","game_result","result","alert","RenderData","newData","setNewdata","SinglePlayerData","count","board","current_board","splitBoard","split","push","newBoard","join","localStorage","setItem"],"sources":["/home/freedom/Desktop/Shreyansh/ReactJS/tictaktoe/src/component/data/Data.jsx"],"sourcesContent":["import { render } from '@testing-library/react';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Dashboard from '../screen/Dashboard';\nimport Main from '../screen/main';\n\nconst MultiPlayerData = async(props) => {\n    debugger\n    if (props.length===2){\n        debugger\n        const resp = await axios.get(`http://localhost:4000/multi_player?board=${props[0]}&reset=true`)    \n        console.log('reset',resp)\n    }\n\n    else {\n        debugger\n        const resp = await axios.get(`http://localhost:4000/multi_player?board=${props}`)\n        debugger\n        console.log('chance',resp)\n        if(resp.data.game_result.result){\n            {alert(\"GAme Over...\",resp.data.game_result.result)}\n        }\n    }\n    \n}\nconst RenderData = (props) => {\n    const [newData,setNewdata] = useState([])\n\n   setNewdata(props)\n\n    render(\n        Main(newData)\n    )\n\n}\n\nconst SinglePlayerData = async(props) => {\n    let count = 0\n    // const [newArry,setNewArry] = useState([])\n    debugger\n    if (props.length===2){\n        debugger\n        const resp = await axios.get(`http://localhost:4000/single_player?board=${props[0]}&reset=true`)    \n        console.log('reset resp',resp)\n    }\n    else{\n        count+=1\n        debugger\n        const resp = await axios.get(`http://localhost:4000/single_player?board=${props}`)\n        debugger\n        let board = resp.data.current_board.board\n        let splitBoard = board.split(\"\")\n        if (splitBoard.length<9){\n            while(splitBoard.length<9){\n                splitBoard.push(\" \")\n            }\n            let newBoard = splitBoard.join(\"\")\n            debugger\n            localStorage.setItem(\"splitBoard\",newBoard)\n            console.log('newBoard = ',newBoard)\n        }\n        else{\n            let newBoard = splitBoard.join(\"\")\n            localStorage.setItem(\"splitBoard\",newBoard)\n            console.log('newBoard = ',newBoard)\n            debugger\n            // setNewArry(splitBoard)\n        }\n        // console.log(\"chance resp\",newBoard)\n    }\n    debugger\n    render(\n        Main(\"single_player\",count)\n        // <Dashboard props={\"single_player\"}/>\n    )\n}\n\n\nexport {MultiPlayerData,SinglePlayerData,RenderData};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}